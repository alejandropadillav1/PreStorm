<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PreStorm</name>
    </assembly>
    <members>
        <member name="T:PreStorm.Domain">
            <summary>
            Represents the coded value domain.
            </summary>
        </member>
        <member name="P:PreStorm.Domain.name">
            <summary>
            The name of the domain.
            </summary>
        </member>
        <member name="P:PreStorm.Domain.codedValues">
            <summary>
            The array of coded values.
            </summary>
        </member>
        <member name="T:PreStorm.CodedValue">
            <summary>
            Represents the coded value.
            </summary>
        </member>
        <member name="P:PreStorm.CodedValue.name">
            <summary>
            The name of the coded value.
            </summary>
        </member>
        <member name="P:PreStorm.CodedValue.code">
            <summary>
            The actual value stored in the database.
            </summary>
        </member>
        <member name="T:PreStorm.Editor">
            <summary>
            Provides editing capabilities to features.
            </summary>
        </member>
        <member name="M:PreStorm.Editor.InsertInto``1(``0[],PreStorm.Service,System.Int32)">
            <summary>
            Inserts the features into a layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="features"></param>
            <param name="service"></param>
            <param name="layerId"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.InsertInto``1(``0,PreStorm.Service,System.Int32)">
            <summary>
            Inserts the feature into a layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="feature"></param>
            <param name="service"></param>
            <param name="layerId"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.InsertInto``1(``0[],PreStorm.Service,System.String)">
            <summary>
            Inserts the features into a layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="features"></param>
            <param name="service"></param>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.InsertInto``1(``0,PreStorm.Service,System.String)">
            <summary>
            Inserts the feature into a layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="feature"></param>
            <param name="service"></param>
            <param name="layerName"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.Update``1(``0[])">
            <summary>
            Updates the features in the underlying layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.Update``1(``0)">
            <summary>
            Updates the feature in the underlying layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.Delete``1(``0[])">
            <summary>
            Deletes the features from the underlying layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Editor.Delete``1(``0)">
            <summary>
            Deletes the feature from the underlying layer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="T:PreStorm.Feature">
            <summary>
            Represents the base class for objects that attributes can be mapped to.  For spatial objects, use the generic version of this type specifying the geometry type.
            </summary>
        </member>
        <member name="M:PreStorm.Feature.#ctor">
            <summary>
            Initializes a new instance of the Feature class.
            </summary>
        </member>
        <member name="M:PreStorm.Feature.RaisePropertyChanged(System.String)">
            <summary>
            Called from a property setter to notify the framework that a member has changed.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:PreStorm.Feature.OID">
            <summary>
            The Object ID of the feature.
            </summary>
        </member>
        <member name="P:PreStorm.Feature.IsDirty">
            <summary>
            Indicates if any of the mapped properties has been changed via the property setter.
            </summary>
        </member>
        <member name="E:PreStorm.Feature.PropertyChanged">
            <summary>
            Represents the method that will handle the PropertyChanged event raised when a property is changed on a component.
            </summary>
        </member>
        <member name="T:PreStorm.Feature`1">
            <summary>
            Represents the base class for objects that attributes can be mapped to.  For non-spatial objects, use the non-generic version of this type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PreStorm.Feature`1.RaiseGeometryChanged">
            <summary>
            Flags the geometry to be updated.  Use this when editing by mutating the internal state of the geometry.
            </summary>
        </member>
        <member name="P:PreStorm.Feature`1.Geometry">
            <summary>
            The geometry of the underlying graphic object.
            </summary>
        </member>
        <member name="T:PreStorm.Service">
            <summary>
            Abstracts the querying of features.
            </summary>
        </member>
        <member name="M:PreStorm.Service.#ctor(System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the Service class.
            </summary>
            <param name="url">The url of the service.  The url should end with either MapServer or FeatureServer.</param>
            <param name="credentials">The windows crendentials used for secured services.</param>
        </member>
        <member name="M:PreStorm.Service.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Service class.
            </summary>
            <param name="url">The url of the service.  The url should end with either MapServer or FeatureServer.</param>
            <param name="userName">The user name for token-based authentication.</param>
            <param name="password">The password for token-based authentication.</param>
        </member>
        <member name="M:PreStorm.Service.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Service class.
            </summary>
            <param name="url">The url of the service.  The url should end with either MapServer or FeatureServer.</param>
        </member>
        <member name="M:PreStorm.Service.Download``1(System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Downloads records and them as a lazy sequence of features of the specified type.
            </summary>
            <typeparam name="T">The type the record should be mapped to.</typeparam>
            <param name="layerId">The layer ID of the feature layer or table.</param>
            <param name="whereClause">The where clause for server-side filtering.  If set to null, returns all features.</param>
            <param name="keepQuerying">If set to true, repetitively queries the server until all features have been returned.</param>
            <param name="degreeOfParallelism">The maximum number of concurrent requests.</param>
            <returns></returns>
        </member>
        <member name="M:PreStorm.Service.Download``1(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Downloads records and them as a lazy sequence of features of the specified type.
            </summary>
            <typeparam name="T">The type the record should be mapped to.</typeparam>
            <param name="layerName">The name of the feature layer or table.  If the service contains two or more layers with this name, use the overload that takes the layer ID rather than the name.</param>
            <param name="whereClause">The where clause for server-side filtering.  If set to null, returns all features.</param>
            <param name="keepQuerying">If set to true, repetitively queries the server until all features have been returned.</param>
            <param name="degreeOfParallelism">The maximum number of concurrent requests.</param>
            <returns></returns>
        </member>
        <member name="P:PreStorm.Service.Domains">
            <summary>
            The array of coded value domains used by this service.
            </summary>
        </member>
        <member name="T:PreStorm.Geometry">
            <summary>
            Represents the base class for all geometry types that are supported by ArcGIS Rest API.
            </summary>
        </member>
        <member name="M:PreStorm.Geometry.ToString">
            <summary>
            Returns the JSON representation of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PreStorm.Point">
            <summary>
            Represents the point geometry.
            </summary>
        </member>
        <member name="P:PreStorm.Point.x">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:PreStorm.Point.y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="T:PreStorm.Multipoint">
            <summary>
            Represents the multipoint geometry.
            </summary>
        </member>
        <member name="P:PreStorm.Multipoint.points">
            <summary>
            The array of points.
            </summary>
        </member>
        <member name="T:PreStorm.Polyline">
            <summary>
            Represents the polyline geometry.
            </summary>
        </member>
        <member name="P:PreStorm.Polyline.paths">
            <summary>
            The array of paths.
            </summary>
        </member>
        <member name="T:PreStorm.Polygon">
            <summary>
            Represents the polygon geometry.
            </summary>
        </member>
        <member name="P:PreStorm.Polygon.rings">
            <summary>
            The array of rings.
            </summary>
        </member>
        <member name="T:PreStorm.Mapped">
            <summary>
            Provides a custom attribute for specifying the source field name.  This is used to map a database field to a property.
            </summary>
        </member>
        <member name="M:PreStorm.Mapped.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Mapped class.
            </summary>
            <param name="fieldName">The name of the database field.  Case sensitive.</param>
        </member>
        <member name="M:PreStorm.Mapped.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Mapped class.
            </summary>
            <param name="fieldName">The name of the database field.  Case sensitive.</param>
            <param name="domainName">The name of the coded value domain.  Case sensitive.  Optional.  If not specified, the raw values from the database are returned.</param>
        </member>
        <member name="P:PreStorm.Mapped.GetFieldName">
            <summary>
            The function used to retieve the field name.  If this is set to null (default), the text sent to the Mapped constructor is the actual field name.  This can be replaced by another function such as s => ConfigurationManager.AppSettings[s], which will use the string to retrieve the real field name from app.config.
            </summary>
        </member>
        <member name="P:PreStorm.Mapped.GetDomainName">
            <summary>
            The function used to retieve the domain name.  If this is set to null (default), the text sent to the Mapped constructor is the actual domain name.  This can be replaced by another function such as s => ConfigurationManager.AppSettings[s], which will use the string to retrieve the real domain name from app.config.
            </summary>
        </member>
    </members>
</doc>
